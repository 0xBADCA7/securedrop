#!/bin/bash

set -u
set -e



# Whether to clobber a pre-existing vars file.
override_previous_vars="no"

function usage() {
    printf "Usage: %s [-f|--force]\n" "$0"
    printf "\tConfigure SecureDrop environment via variables.\n"
    printf "\tUse --force to overwrite preexisting vars.\n"
}
# Parse arguments.
while [[ $# -gt 0 ]]; do
    for arg in "$@"; do
        case "${arg}" in
            -h|--help)
            usage
            exit 0
            ;;
            -f|--force)
            override_previous_vars="yes"
            shift
            ;;
        esac
    done
done

# Declare path to site-specific vars file.
site_specific_vars="$(realpath "$(dirname "${BASH_SOURCE[0]}")")/group_vars/all/site-specific"

# If vars file already exists, let's prepopulate the prompts with those values.
if [[ -e "${site_specific_vars}" && "${override_previous_vars}" != "yes" ]]; then
    # Passing an empty inventory file to override the automatic dynamic inventory script,
    # which fails if no site vars are configured.
    ansible-playbook -i /dev/null securedrop-configure.yml --extra-vars "@${site_specific_vars}"
# Otherwise we'll run the playbook from scratch and fill in the values.
else
    ansible-playbook -i /dev/null securedrop-configure.yml
fi
