ServerName {{ apache_listening_address | default('127.0.0.1') }}
<VirtualHost {{ apache_listening_address | default('127.0.0.1') }}:80>

WSGIDaemonProcess source  processes=2 threads=30 display-name=%{GROUP} python-path=/var/www/securedrop
WSGIProcessGroup source
WSGIScriptAlias / /var/www/source.wsgi

# Tell the browser not to cache HTML responses in order to minimize the chance
# of the inadvertent release or retention of sensitive data. For more, see
# https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9.2.
Header set Cache-Control "no-store"

Alias /static /var/www/securedrop/static
<Directory /var/www/securedrop/static>
  Order allow,deny
  Allow from all
  # Cache static resources for 1 hour
  Header set Cache-Control "max-age=3600"
</Directory>

XSendFile        Off

# Prevent cookies from being accessed from Javascript. XSS mitigation.
Header edit Set-Cookie ^(.*)$ $1;HttpOnly

# Don't allow SecureDrop to be framed. Clickjacking mitigation.
Header always append X-Frame-Options: DENY

# Set a strict CSP; "default-src 'self'" prevents 3rd party subresources from
# loading and prevents inline script from executing.
Header set Content-Security-Policy: "default-src 'self'"

# Miscellanous "security" headers. Most of these should be removed because they
# are irrelevant in our target browser (Tor Browser). TODO: consider removing
Header set X-XSS-Protection: "1; mode=block"
Header set X-Content-Type-Options: nosniff
Header set X-Content-Security-Policy: "default-src 'self'"
Header set X-Download-Options: noopen

# Misguided privacy hardening? TODO: consider removing
Header unset Etag

# Limit the max submitted size of requests to help prevent DoS.
LimitRequestBody 524288000

# Redirect error pages to ensure headers are sent
# TODO: revisit. Is this really doing what we want? I think we just want to
# minimize potential leakage from error pages generated by Apache. Why must the
# headers be sent? I assume that means the response headers - but those will be
# irrelevant on a static HTML error page.
ErrorDocument 400 /notfound
ErrorDocument 401 /notfound
ErrorDocument 403 /notfound
ErrorDocument 404 /notfound
ErrorDocument 500 /notfound

# TODO: do we really need all of this? Seems like it might be a bunch of fairly
# redundant "hardening".
<Directory />
  Options None
  AllowOverride None
  Order deny,allow
  Deny from all
</Directory>

<Directory /var/www/>
  Options {{ apache_dir_options | default('None') }}
  AllowOverride None
  <Limit GET POST HEAD>
    Order allow,deny
    allow from {{ apache_allow_from | default('127.0.0.1') }}
  </Limit>
  <LimitExcept GET POST HEAD>
    Order deny,allow
    Deny from all
  </LimitExcept>
</Directory>

<Directory /var/www/securedrop>
  Options {{ apache_dir_options | default('None') }}
  AllowOverride None
  <Limit GET POST HEAD>
    Order allow,deny
    allow from {{ apache_allow_from | default('127.0.0.1') }}
  </Limit>
  <LimitExcept GET POST HEAD>
    Order deny,allow
    Deny from all
  </LimitExcept>
</Directory>

# TODO: what is this purpose of rewriting here?
RewriteEngine On
RewriteCond %{THE_REQUEST} !HTTP/1\.1$
RewriteRule .* - [F]

ErrorLog {{ source_apache_log_location | default('/dev/null') }}
LogLevel {{ apache_logging_level | default('crit') }}

</VirtualHost>
