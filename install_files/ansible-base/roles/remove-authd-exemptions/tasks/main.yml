---
  # If the OSSEC authd iptable rule exemptions are in place, remove them and
  # restart OSSEC. This role must run on the app server first and then on
  # the monitor server. This order is important, since the app server's
  # OSSEC agent needs to restart to load the imported cert from authd and
  # connect to the ossec server. The monitor server's OSSEC service needs to
  # restart after the agent connects to correctly display the agent status.
- name: Remove firewall exemptions for OSSEC authd registration.
  lineinfile:
    state: absent
    dest: /etc/network/iptables/rules_v4
    # last line in the initial *filter stanza (which must come before any rules)
    # rules will be applied before the default rules defined in rules_v4 file
    line: "{{ item }}"
  notify:
    - reload iptables rules
    - restart ossec
  with_items: authd_rules
  tags:
    - iptables
    - ossec_auth

- name: Check if authd process is running.
  command: pgrep ossec-authd
  # pgrep returns 1 if no process is found, so ignore that error.
  # This is essentially a read-only task, with the subsequent task
  # potentially making changes
  failed_when: false
  changed_when: false
  register: ossec_authd_running_check
  tags:
    - iptables
    - ossec_auth
    - authd

- name: Kill authd process if running.
  # This should work using the pattern to grep for in the output of ps per
  # http://docs.ansible.com/service_module.html
  # Currently getting an error saying
  # failed: [mon-staging] => {"failed": true}
  #  msg: service not found: ossec-authd
  # service: name=ossec-authd pattern=/var/ossec/bin/ossec-authd state=started
  command: kill {{ item }}
  # It's technically possible that pgrep will return more than one PID.
  # Let's be careful and kill each process, even though in most cases there
  # will be only one, if any.
  with_items: ossec_authd_running_check.stdout_lines
  when: ossec_authd_running_check.rc == 0 and
        ossec_authd_running_check.stdout != ""
  tags:
    - iptables
    - ossec_auth
    - authd
