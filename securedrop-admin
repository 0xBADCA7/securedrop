#!/usr/bin/env python2
"""
SecureDrop Admin Toolkit.

For use by administrators to install, maintain, and manage their SD
instances.
"""

import argparse
import subprocess
import os
import sys
import getpass
import logging

sdlog = logging.getLogger('SD')

SD_DIR = os.path.dirname(os.path.realpath(__file__))
ANSIBLE_PATH = os.path.join(SD_DIR, "./install_files/ansible-base")
SITE_CONFIG = os.path.join(ANSIBLE_PATH, "group_vars/all/site-specific")
VENV_DIR = os.path.join(SD_DIR, ".venv")
VENV_ACTIVATION = os.path.join(VENV_DIR, 'bin/activate_this.py')


def logger_setup(verbose=False):
    """ Configure logging handler """
    # Set default level on parent
    sdlog.setLevel(logging.DEBUG)
    level = logging.DEBUG if verbose else logging.INFO

    stdout = logging.StreamHandler(sys.stdout)
    stdout.setFormatter(logging.Formatter('%(levelname)s: %(message)s'))
    stdout.setLevel(level)
    sdlog.addHandler(stdout)

def activate_venv():
    """Use to activate the local virtualenv"""
    try:
        execfile(VENV_ACTIVATION, dict(__file__=VENV_ACTIVATION))
    except IOError:
        sdlog.error("Pre-requisites not in place, re-run command with 'setup'")
        sys.exit(1)


def sdconfig(args):
    """Configure SD site settings"""
    activate_venv()
    subprocess.check_call([os.path.join(ANSIBLE_PATH,'configure')],
                            cwd=ANSIBLE_PATH, env=os.environ.copy())


def envsetup(args):
    """Install SD pre-reqs"""
    # virtualenv doesnt exist? Install dependencies and create
    if not os.path.exists(VENV_ACTIVATION):
        sdlog.info("Installing dependencies. You'll be prompted for the "+\
            "temporary Tails root credentials. This was set on boot-up screen")
        sdlog.debug(subprocess.check_output(['sudo', 'su', '-c',
                                            "apt-get update && \
                                            apt-get install -y \
                                            python-virtualenv \
                                            python-pip \
                                            ccontrol \
                                            virtualenv \
                                            libffi-dev \
                                            libssl-dev \
                                            libpython2.7-dev"]))

        # Technically you can create a virtualenv from within python
        # but pip can only be run over tor on tails, and debugging that
        # along with instaling a third-party dependency is not worth
        # the effort here.
        sdlog.info("Setting up virtualenv")
        sdlog.debug(subprocess.check_output(['torify', 'virtualenv',
                                        VENV_DIR], stderr=subprocess.STDOUT))

    pip_install_cmd = [
            'torify',
            os.path.join(VENV_DIR, 'bin', 'pip'),
            'install',
            ]
    requirements_cmd = ['-r', os.path.join(ANSIBLE_PATH, 'requirements.txt'),
                        '--require-hashes']
    upgrade = ['-U', '--upgrade-strategy', 'only-if-needed']

    sdlog.info("Checking pip dependencies")
    pip_output = subprocess.check_output(pip_install_cmd+upgrade+requirements_cmd)

    if "Successfully installed" in pip_output:
        sdlog.info(pip_output)
    else:
        sdlog.info("pip depdencies up-to-date")
        sdlog.debug(pip_output)

def install_securedrop(args):
    """Install/Update SecureDrop"""
    activate_venv()
    # Yaml library cannot be imported until virtualenv is activated
    # (hence the yaml library is not imported up-top)
    import yaml

    try:
        with open(SITE_CONFIG) as site_config_file:
            site_config_vars = yaml.safe_load(site_config_file.read())

        # Username may have been provided as `--user`, but try to fall back
        # to YAML vars files if not.
        ansible_user = args.user or site_config_vars['ssh_users']
    except IOError:
        sdlog.error("Config file missing, re-run with sdconfig")
        sys.exit(1)
    except yaml.YAMLError:
        sdlog.error("There was an issue processing {}".format(SITE_CONFIG))
        sys.exit(1)

    else:
        sdlog.info("Now installing SecureDrop on remote servers.")
        sudo_prompt = "Sudo password for servers [blank if not needed]: "
        ansible_password = getpass.getpass(prompt=sudo_prompt)
        subprocess.check_call([os.path.join(ANSIBLE_PATH, 'securedrop-prod.yml'),
                         '-u '+ansible_user,
                         "-e ansible_become_pass={}".format(ansible_password),
                         ],
                        cwd=ANSIBLE_PATH)


def run_tails_config(args):
    """Configure Tails environment post SD install"""
    subprocess.check_call(['sudo',
                            os.path.join(SD_DIR, 'tails_files/install.sh')])


if __name__ == "__main__":

    # Processing argument parsing logic -- yuck
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-v', action='store_true', default=False,
                            help="Increase verbosity on output")
    subparsers = parser.add_subparsers()

    parse_setup = subparsers.add_parser('setup', help=envsetup.__doc__)
    parse_setup.set_defaults(func=envsetup)

    parse_sdconfig = subparsers.add_parser('sdconfig', help=sdconfig.__doc__)
    parse_sdconfig.set_defaults(func=sdconfig)

    parse_install = subparsers.add_parser('install',
                                          help=install_securedrop.__doc__)
    parse_install.add_argument('--user', type=str, default=None,
                               help="Over-ride user defined in vars")
    parse_install.set_defaults(func=install_securedrop)

    parse_tailsconfig = subparsers.add_parser('tailsconfig',
                                              help=run_tails_config.__doc__)
    parse_tailsconfig.set_defaults(func=run_tails_config)

    args = parser.parse_args()
    logger_setup(args.v)
    args.func(args)
